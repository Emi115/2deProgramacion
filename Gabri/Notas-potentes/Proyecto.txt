Este es mi proyecto de bloc de notas en el cual en una carpeta files me crea notas usando peticiones postman. Te voy a poner la ruta del archivo y el codigo de todo lo que tengo creado en src hay 5 carpetas(controllers , loaders , routes , services y utils) con sus propios archivos js y 3 archivos que son: app.js config.js y index.js







/src/controllers/index.js:
// Controlador para la ruta raíz ("/") que devuelve un mensaje de saludo.
function rootController(req, res) {
  // Establecemos el estado de la respuesta en 200 (OK) y enviamos el mensaje de saludo.
  res.status(200).send('Hola todo va perfe');
}

// Exportamos el controlador para que pueda ser utilizado en otras partes de la aplicación.
module.exports = {
  rootController,
};

/src/controllers/notas.js:
/* eslint-disable max-len */
// Importamos el módulo fs para operaciones de sistema de archivos.
const fs = require('fs');

// Importamos el módulo logger y el servicio de notas.
const { logger } = require('../utils');
const notasService = require('../services/notas');

// Controlador para obtener la lista de notas.

// Controlador para obtener la lista de notas.
function recogerNotas(req, res) {
  // Leemos los archivos en el directorio de notas y los ordenamos alfabéticamente.
  const files = fs.readdirSync('./files').sort();
  const notasList = files.join('\n'); // Convertimos el array de notas en un solo string con saltos de línea.
  res.set('Content-Type', 'text/plain'); // Establecemos el tipo de contenido como texto plano.
  res.status(200).send(notasList);
  logger.info('OK - Notas mostradas');
}

// Controlador para obtener la lista de notas ordenadas por fecha.
function recogerNotasPorFecha(req, res) {
  // Leemos los archivos en el directorio de notas.
  const files = fs.readdirSync('./files');

  // Obtenemos la información de fecha de creación de cada archivo y la almacenamos en un array de objetos.
  const notasConFecha = files.map(file => {
    const { ctime } = fs.statSync(`./files/${file}`);
    return { file, ctime };
  });

  // Ordenamos el array de objetos por fecha de creación en orden ascendente.
  const notasOrdenadasPorFecha = notasConFecha.sort((a, b) => a.ctime - b.ctime);

  // Extraemos solo los nombres de archivo ordenados y los unimos en un solo string con saltos de línea.
  const nombresOrdenados = notasOrdenadasPorFecha.map(nota => nota.file).join('\n');

  // Enviamos la lista de notas ordenadas por fecha como respuesta.
  res.status(200).set('Content-Type', 'text/plain').send(nombresOrdenados);
  logger.info('OK - Notas mostradas ordenadas por fecha');
}

// Controlador para crear una nueva nota.
function crearNota(req, res) {
  // Obtenemos el nombre y los datos de la nota desde el cuerpo de la solicitud.
  const { name, data } = req.body;

  // Creamos la nota utilizando el servicio de notas.
  const createdNote = notasService.crearNota(name, data);

  // Enviamos la nota creada como respuesta.
  res.status(201).send(createdNote);
  logger.info('OK - Nota creada');
}

// Controlador para editar una nota existente.
function editarNota(req, res) {
  // Obtenemos el nombre y los nuevos datos de la nota desde los parámetros y el cuerpo de la solicitud.
  const { name } = req.params;
  const { data } = req.body;

  // Editamos la nota utilizando el servicio de notas.
  const editedNote = notasService.editarNota(name, data);

  // Enviamos la nota editada como respuesta.
  res.status(201).send(editedNote);
  logger.info('OK - Nota editada');
}

// Controlador para eliminar una nota.
function eliminarNota(req, res) {
  // Obtenemos el nombre de la nota desde los parámetros.
  const { name } = req.params;

  // Eliminamos la nota utilizando el servicio de notas.
  const deletedNote = notasService.eliminarNota(name);

  // Enviamos la nota eliminada como respuesta.
  res.status(201).send(deletedNote);
  logger.info('OK - Nota eliminada');
}

// Exportamos los controladores para que puedan ser utilizados en otras partes de la aplicación.
module.exports = {
  recogerNotas,
  recogerNotasPorFecha,
  crearNota,
  editarNota,
  eliminarNota,
};

/src/loaders/expres.js:
/* eslint-disable spaced-comment */
/* eslint-disable arrow-parens */
const express = require('express');
const path = require('path'); // Asegúrate de importar la biblioteca 'path'.

// Importamos las rutas de la aplicación.
const routes = require('../routes');

// Construir la ruta de la imagen correctamente
const imagePath = path.join(process.cwd(), 'src', '404error.jpg');

// Exportamos una función que inicializa y configura el servidor Express.
module.exports = (server) => {
  // Habilitamos el middleware para analizar el cuerpo de las solicitudes en formato JSON.
  server.use(express.json());

  // Habilitamos el middleware para analizar los datos de las solicitudes codificadas en URL.
  server.use(express.urlencoded({ extended: true }));

  // Utilizamos las rutas definidas en el archivo routes.js.
  server.use(routes);

  // Manejamos las solicitudes no encontradas con el envío de la imagen en respuestas 404.
  server.use((req, res) => res.status(404).sendFile(imagePath));
};

src/loaders/index.js:
const expressLoader = require('./express');

function init(app, config) {
  expressLoader(app);
}

module.exports = {
  init,
};

/src/routes/index.js:
/* eslint-disable max-len */
// Importamos la biblioteca Express para construir aplicaciones web y crear un enrutador.
const express = require('express');

// Importamos los controladores y el enrutador de notas.
const { rootController } = require('../controllers');
// Importamos los controladores relacionados con las notas.
const { recogerNotas, recogerNotasPorFecha } = require('../controllers/notas');
const notasRouter = require('./notas');

// Creamos un enrutador de Express.
const router = express.Router();

// Definimos una ruta para manejar solicitudes POST en la raíz ("/") utilizando el controlador rootController.
router.post('/', rootController);

// Utilizamos el enrutador de notas para manejar solicitudes que comienzan con "/notas".
router.use('/notas', notasRouter);

// Definimos una ruta para manejar solicitudes GET en "/notas" utilizando el controlador recogerNotas.
router.get('/notas', recogerNotas);

// Definimos una ruta para manejar solicitudes GET en la ruta "/notas_fecha" utilizando el controlador recogerNotasPorFecha.
router.get('/notas_fecha', recogerNotasPorFecha);

// Exportamos el enrutador para que pueda ser utilizado en otras partes de la aplicación.
module.exports = router;

/src/routes/notas.js:
/* eslint-disable max-len */
// Importamos la biblioteca Express para construir aplicaciones web y crear un enrutador.
const express = require('express');

// Importamos los controladores relacionados con las notas.
const {
  recogerNotas, crearNota, editarNota, eliminarNota,
} = require('../controllers/notas');

// Creamos un enrutador de Express.
const router = express.Router();

// Definimos una ruta para manejar solicitudes GET en la ruta principal ("/notas") utilizando el controlador recogerNotas.
router.get('/', recogerNotas);

// Definimos una ruta para manejar solicitudes POST en la ruta principal ("/notas") utilizando el controlador crearNota.
router.post('/', crearNota);

// Definimos una ruta para manejar solicitudes PUT en la ruta con un nombre específico ("/notas/:name") utilizando el controlador editarNota.
router.put('/:name', editarNota);

// Definimos una ruta para manejar solicitudes DELETE en la ruta con un nombre específico ("/notas/:name") utilizando el controlador eliminarNota.
router.delete('/:name', eliminarNota);

// Exportamos el enrutador para que pueda ser utilizado en otras partes de la aplicación.
module.exports = router;

/src/services/notas.js:
/* eslint-disable max-len */
// Importamos el módulo fs para operaciones de sistema de archivos.
const fs = require('fs');

// Importamos utilidades relacionadas con las notas.
const notasUtils = require('../utils/notas');

// Función para crear una nueva nota con un nombre y datos dados.
function crearNota(name, data) {
  // Escribimos los datos en un archivo utilizando el camino proporcionado por las utilidades de notas.
  fs.writeFileSync(notasUtils.getPath(name), data);
}

// Función para editar una nota existente con un nombre dado y nuevos datos.
function editarNota(name, data) {
  // Sobrescribimos los datos en un archivo utilizando el camino proporcionado por las utilidades de notas.
  fs.writeFileSync(notasUtils.getPath(name), data);
}

// Función para eliminar una nota con un nombre dado.
function eliminarNota(name) {
  // Eliminamos el archivo utilizando el camino proporcionado por las utilidades de notas.
  fs.unlink(notasUtils.getPath(name), err => {
    if (err) throw err;
  });
}

// Exportamos las funciones para que puedan ser utilizadas en otras partes de la aplicación.
module.exports = {
  crearNota,
  editarNota,
  eliminarNota,
};

/src/utils/index.js:
/* eslint-disable max-len */
// Importamos el módulo de registro (logger).
const logger = require('./logger');

// Exportamos un objeto que contiene el módulo de registro para que pueda ser utilizado en otras partes de la aplicación.
module.exports = {
  logger,
};

/src/utils/logger.js:
/* eslint-disable object-curly-newline */
// Importamos la biblioteca Winston para el registro de registros.
const winston = require('winston');

// Importamos módulos específicos de Winston.
const { format, transports, createLogger } = winston;
const { combine, timestamp, printf, colorize } = format;

// Creamos un objeto logger utilizando Winston.
const logger = createLogger({
  // Configuramos el transporte para imprimir logs en la consola.
  transports: [
    new transports.Console({
      // Configuramos el formato del log con información de tiempo, color y mensaje.
      format: combine(
        timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
        colorize(),
        printf(info => `[${info.timestamp}] ${info.level} ${info.message}`),
      ),
      // Silenciamos el logger en entornos de prueba.
      silent: process.env.NODE_ENV === 'test',
    }),
  ],
  // Desactivamos la salida en caso de error.
  exitOnError: false,
});

// Exportamos el objeto logger para que pueda ser utilizado en otras partes de la aplicación.
module.exports = logger;

/src/utils/notas.js:
// Importamos la configuración de la aplicación.
const config = require('../config');

// Función que devuelve la ruta completa para una nota con el nombre dado.
function getPath(name) {
  // Construimos la ruta utilizando la carpeta y extensión configuradas en la aplicación.
  return `./${config.notes.folder}/${name}.${config.notes.ext}`;
}

// Exportamos la función para que pueda ser utilizada en otras partes de la aplicación.
module.exports = {
  getPath,
};

/src/app.js:
/* eslint-disable max-len */
// Importamos la biblioteca Express, que nos permite construir aplicaciones web.
const express = require('express');

// Importamos los módulos loaders y config, que contienen la inicialización de la aplicación y la configuración respectivamente.
const loaders = require('./loaders');
const config = require('./config');

// Creamos una instancia de la aplicación Express.
const app = express();

// Inicializamos la aplicación utilizando los módulos loaders y config que importamos anteriormente.
loaders.init(app, config);

// Exportamos la aplicación para que pueda ser utilizada en otros archivos.
module.exports = app;

/src/config.js:
/* eslint-disable no-trailing-spaces */
// Definimos el número de puerto en el que la aplicación escuchará las solicitudes.
const port = 3000;

// Exportamos un objeto que contiene la configuración de la aplicación.
module.exports = {
  // Configuración del puerto
  port,

  // Configuración específica para las notas
  notes: {
    // Carpeta donde se almacenarán los archivos de notas
    folder: 'files',
    
    // Extensión de los archivos de notas
    ext: 'note',
  },
};

/src/index.js:
/* eslint-disable max-len */
// Importamos la biblioteca Express para construir aplicaciones web.
const express = require('express');

// Creamos una instancia del servidor Express.
const server = express();

// Importamos los módulos loaders, config y logger que contienen la inicialización de la aplicación, la configuración y el registro respectivamente.
const loaders = require('./loaders');
const config = require('./config');
const { logger } = require('./utils');

// Extraemos el número de puerto de la configuración.
const { port } = config;

// Inicializamos la aplicación utilizando el módulo loaders.
loaders.init(server);

// Hacemos que el servidor escuche en el puerto definido.
server.listen(port, () => {
  // Imprimimos un mensaje en el registro indicando que el servidor está escuchando en el puerto especificado.
  logger.info(`Listening the port ${port}`);
});

/test/nota.test.js:
/* eslint-disable no-param-reassign */
// Importamos el marco de pruebas 'ava' y la biblioteca 'sinon' para espiar funciones.
// eslint-disable-next-line import/no-unresolved
import test from 'ava';
import sinon from 'sinon';

// Importamos las funciones del servicio de notas que queremos probar.
const { crearNota, editarNota, eliminarNota } = require('../src/services/notas');

// Configuramos espias (spies) para las funciones del servicio antes de cada prueba.
test.beforeEach(t => {
  // Configuramos un espión para la función crearNota.
  t.context.crearNota = sinon.spy(crearNota);
});

test.beforeEach(t => {
  // Configuramos un espión para la función editarNota.
  t.context.editarNota = sinon.spy(editarNota);
});

test.beforeEach(t => {
  // Configuramos un espión para la función eliminarNota.
  t.context.eliminarNota = sinon.spy(eliminarNota);
});

// Prueba para verificar si la función crearNota se llama correctamente.
test('crearNota: debe crearnos una nota', t => {
  const name = 'prueba';
  const data = 'esto es una prueba';
  t.context.crearNota(name, data);
  // Verificamos si la función crearNota fue llamada con los argumentos correctos.
  t.true(t.context.crearNota.calledWith(name, data));
});

// Prueba para verificar si la función editarNota se llama correctamente.
test('editarNota: debe editarnos la nota', t => {
  const name = 'prueba';
  const data = 'esto es una prueba-editando';
  t.context.editarNota(name, data);
  // Verificamos si la función editarNota fue llamada con los argumentos correctos.
  t.true(t.context.editarNota.calledWith(name, data));
});

// Prueba para verificar si la función eliminarNota se llama correctamente.
test('eliminarNota: debe eliminarnos la nota', t => {
  const name = 'prueba';
  t.context.eliminarNota(name);
  // Verificamos si la función eliminarNota fue llamada con los argumentos correctos.
  t.true(t.context.eliminarNota.calledWith(name));
});

/package.json:
{
  "type": "commonjs",
  "name": "notas-potentes",
  "version": "0.0.1",
  "description": "Si",
  "main": "src/index.js",
  "scripts": {
    "start": "nodemon src/index.js",
    "dev": "nodemon src/index.js",
    "test": "ava",
    "@comment notas": "Atajamos la ejecución de notas entrando directamente a las opciones.",
    "notas:crear": "node editorNotas.js 1",
    "notas:editar": "node editorNotas.js 2",
    "notas:eliminar": "node editorNotas.js 3",
    "lint": "eslint --ignore-path .gitignore .",
    "lint:fix": "eslint --fix --ignore-path .gitignore ."
  },
  "author": "Sesar caesar",
  "license": "MIT",
  "devDependencies": {
    "ava": "^5.1.0",
    "eslint": "^8.27.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-plugin-ava": "^13.2.0",
    "eslint-plugin-import": "^2.26.0",
    "eslint-plugin-react": "^7.31.10",
    "nodemon": "^2.0.20"
  },
  "ava": {
    "files": [
      "test/**/*.test.js"
    ]
  },
  "dependencies": {
    "express": "^4.18.2",
    "jest": "^29.3.1",
    "sinon": "^15.0.1",
    "winston": "^3.8.2"
  }
}

/.vscode/settings.json:
{
    // Deshabilita la capacidad de arrastrar y soltar código en el editor.
    "editor.dragAndDrop": false,
  
    // Configuración adicional, si es necesario.
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit"
    },
    "editor.rulers": [99, 100],
    "terminal.integrated.tabs.title": "${cwdFolder}"
  }
  